{"ast":null,"code":"const handleConfirm = async () => {\n  if (Object.values(deliveryInfo).every(value => value)) {\n    // Si toutes les informations sont présentes, envoyer la commande au backend\n    try {\n      var _cartItems$;\n      const response = await fetch(`${process.env.REACT_APP_API_URL}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: userId,\n          items: cartItems,\n          deliveryInfo: deliveryInfo,\n          totalPrice: cartItems.reduce((total, item) => total + item.price * item.quantity, 0),\n          image: (_cartItems$ = cartItems[0]) === null || _cartItems$ === void 0 ? void 0 : _cartItems$.image // Assurez-vous que l'image est envoyée si elle existe\n        })\n      });\n      if (response.ok) {\n        await response.json();\n        alert('Commande confirmée et envoyée au serveur !');\n        navigate('/'); // Redirige vers la page d'accueil après la confirmation\n        setDeliveryInfo({\n          name: '',\n          surname: '',\n          city: '',\n          neighborhood: '',\n          phone: ''\n        });\n        setErrorMessage('');\n      } else {\n        alert('Erreur lors de l\\'envoi des informations de commande.');\n        setErrorMessage('Erreur lors de l\\'envoi des informations de commande.');\n      }\n    } catch (error) {\n      alert('Erreur de connexion avec le serveur:');\n      console.error('Erreur de connexion avec le serveur:', error);\n      setErrorMessage('Impossible de se connecter au serveur');\n    }\n  } else {\n    setErrorMessage('Veuillez entrer toutes les informations de livraison.');\n  }\n};","map":{"version":3,"names":["handleConfirm","Object","values","deliveryInfo","every","value","_cartItems$","response","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","userId","items","cartItems","totalPrice","reduce","total","item","price","quantity","image","ok","json","alert","navigate","setDeliveryInfo","name","surname","city","neighborhood","phone","setErrorMessage","error","console"],"sources":["/home/fathane/link_repository/frontend/src/components/DeliveryPage.js"],"sourcesContent":["const handleConfirm = async () => {\n    if (Object.values(deliveryInfo).every(value => value)) {\n        // Si toutes les informations sont présentes, envoyer la commande au backend\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    userId: userId,\n                    items: cartItems,\n                    deliveryInfo: deliveryInfo,\n                    totalPrice: cartItems.reduce((total, item) => total + item.price * item.quantity, 0),\n                    image: cartItems[0]?.image // Assurez-vous que l'image est envoyée si elle existe\n                }),\n            });\n\n            if (response.ok) {\n                await response.json();\n                alert('Commande confirmée et envoyée au serveur !');\n                navigate('/'); // Redirige vers la page d'accueil après la confirmation\n                setDeliveryInfo({ name: '', surname: '', city: '', neighborhood: '', phone: '' });\n                setErrorMessage('');\n            } else {\n                alert('Erreur lors de l\\'envoi des informations de commande.');\n                setErrorMessage('Erreur lors de l\\'envoi des informations de commande.');\n            }\n        } catch (error) {\n            alert('Erreur de connexion avec le serveur:');\n            console.error('Erreur de connexion avec le serveur:', error);\n            setErrorMessage('Impossible de se connecter au serveur');\n        }\n    } else {\n        setErrorMessage('Veuillez entrer toutes les informations de livraison.');\n    }\n};\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;EAC9B,IAAIC,MAAM,CAACC,MAAM,CAACC,YAAY,CAAC,CAACC,KAAK,CAACC,KAAK,IAAIA,KAAK,CAAC,EAAE;IACnD;IACA,IAAI;MAAA,IAAAC,WAAA;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAE,EAAE;QAC7DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBC,MAAM,EAAEA,MAAM;UACdC,KAAK,EAAEC,SAAS;UAChBhB,YAAY,EAAEA,YAAY;UAC1BiB,UAAU,EAAED,SAAS,CAACE,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAK,GAAGC,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACE,QAAQ,EAAE,CAAC,CAAC;UACpFC,KAAK,GAAApB,WAAA,GAAEa,SAAS,CAAC,CAAC,CAAC,cAAAb,WAAA,uBAAZA,WAAA,CAAcoB,KAAK,CAAC;QAC/B,CAAC;MACL,CAAC,CAAC;MAEF,IAAInB,QAAQ,CAACoB,EAAE,EAAE;QACb,MAAMpB,QAAQ,CAACqB,IAAI,CAAC,CAAC;QACrBC,KAAK,CAAC,4CAA4C,CAAC;QACnDC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;QACfC,eAAe,CAAC;UAAEC,IAAI,EAAE,EAAE;UAAEC,OAAO,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEC,YAAY,EAAE,EAAE;UAAEC,KAAK,EAAE;QAAG,CAAC,CAAC;QACjFC,eAAe,CAAC,EAAE,CAAC;MACvB,CAAC,MAAM;QACHR,KAAK,CAAC,uDAAuD,CAAC;QAC9DQ,eAAe,CAAC,uDAAuD,CAAC;MAC5E;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZT,KAAK,CAAC,sCAAsC,CAAC;MAC7CU,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5DD,eAAe,CAAC,uCAAuC,CAAC;IAC5D;EACJ,CAAC,MAAM;IACHA,eAAe,CAAC,uDAAuD,CAAC;EAC5E;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}